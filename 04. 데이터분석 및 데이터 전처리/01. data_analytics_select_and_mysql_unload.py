# -*- coding: utf-8 -*-
"""01. 데이터야 놀자.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ORsDtZvJUIC0q8KpsQuXF9LJmLvuUbar

# 라이브러리 설치
"""

!pip install mysql-connector-python

"""# 라이브러리 선언"""

import pandas as pd
from sqlalchemy import create_engine, inspect

"""# 구글드라이브 연동"""

from google.colab import drive
drive.mount("/content/gdrive")

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/MyDrive/Colab Notebooks/analysis_edu/05. 데이터분석 및 데이터 전처리

"""# 파일 불러오기"""

googleUrl = "../dataset/customerdata.csv"
csDataGitUrl = "https://raw.githubusercontent.com/hyokwan/python-lecture/master/dataset/customerdata.csv"

customerData = pd.read_csv(csDataGitUrl)
customerData.info()

# 테이블정의서 저장
typeDf  = pd.DataFrame( customerData.dtypes )
typeDf.to_csv("./테이블정의서.csv", index=True)

"""### 1. 원하는 행 조회하기 (기본조건)"""

emiCond = 2
avgPriceCond = 3500

customerData.loc[  (customerData.EMI > emiCond) &
                   (customerData.AVGPRICE >= avgPriceCond) ].shape

# ★ 조건검증 꼭 해보기
customerData.loc[  (customerData.EMI <= emiCond) |
                   (customerData.AVGPRICE < avgPriceCond) ].shape

"""### 1. 원하는 행 조회하기 (in not in 조건)"""

emiMultiCond = [2,3]

customerData.loc[ ~ customerData.EMI.isin( emiMultiCond )  ].head(2)

"""### 1. 원하는 행 조회하기 (컬럼 값 세부 조건)"""

customerData.loc [customerData.CUSTID.astype(str).str[0] == "A"]

"""### 컬럼명 조작방법"""

# 데이터프레임 컬럼 정보를 시연!
customerData.columns

# 데이터프레임 컬럼정보 수정 * 문자열함수를 사용하려면 .str을 df에서는 써야한다!
customerData.columns = customerData.columns.str.upper()

## 전체 데이터 프레임의 크기 확인용
customerData.shape

"""### 2. 데이터 타입변환 (astype)"""

customerData.EMI = customerData.EMI.astype(str)

columnNameList = list( customerData.columns )

for i in range(0, len(columnNameList)):
    customerData[ columnNameList[i] ] = customerData[ columnNameList[i] ].astype(str)

"""### 3. 인덱스 초기화"""

targetColumns = ["AVGPRICE","EMI"]
# 컬럼 이름으로 조회
customerDataIndex = customerData.loc[ customerData.AVGPRICE.astype(float) < 3000 ,
                  targetColumns ].reset_index(drop=True)

"""### 핵심 데이터 조회를 통해 값을 받아 처리"""

paramDf = pd.read_csv("./paramData.txt")
ipName = "HOST"
portName = "PORT"
userIdName = "USERID"
userPassName = "USERPASS"
dbName = "DBNAME"
targetColum = ["PARAM_VALUE"]
dbIp = paramDf.loc[ paramDf.PARAM_NAME == ipName,targetColum].values[0][0]
dbPort = paramDf.loc[ paramDf.PARAM_NAME == portName,targetColum].values[0][0]
dbUserName = paramDf.loc[ paramDf.PARAM_NAME == userIdName,targetColum].values[0][0]
dbUserPass = paramDf.loc[ paramDf.PARAM_NAME == userPassName,targetColum].values[0][0]
dbName = paramDf.loc[ paramDf.PARAM_NAME == dbName,targetColum].values[0][0]

"""# DB 데이터 저장 (MySQL)"""

# MySQL 데이터베이스 연결 정보 설정 (클라우드)
host = dbIp
port = dbPort
user = dbUserName
password = dbUserPass
database = dbName

# SQLAlchemy 엔진 생성
engine = create_engine(f'mysql+mysqlconnector://{user}:{password}@{host}:{port}/{database}')

# 데이터프레임을 MySQL 데이터베이스의 테이블에 저장
table_name = 'paramdf_0731_final'
paramDf.to_sql(name=table_name, con=engine, if_exists='replace', index=False)